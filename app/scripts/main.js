// Generated by CoffeeScript 1.9.3
(function() {
  var DQ_ID3_Visualizer;

  DQ_ID3_Visualizer = {
    attributes: [],
    trainingData: [],
    testData: [],
    init: function() {
      _.extend(this, DQ_DATA_ADULT);
      this.displayAttributes();
      this.displayData('.training-data', this.trainingData);
      this.displayData('.test-data', this.testData);
      return $('.rebuild-tree').click((function(_this) {
        return function() {
          return _this.rebuildTree();
        };
      })(this));
    },
    displayAttributes: function() {
      return _.each(this.attributes, (function(_this) {
        return function(attribute) {
          return $('.attributes .scrollable').append(_this.buildAttribute(attribute));
        };
      })(this));
    },
    buildAttribute: function(attribute) {
      return attribute.elem = $('<div>').addClass('attribute').append($('<div>').addClass('ig')).append($('<b>').text(attribute.name)).append(" (" + (attribute.classes.join(', ')) + ")");
    },
    displayData: function(selector, data) {
      return _.each(data, (function(_this) {
        return function(datum) {
          return $(selector + " .scrollable").append(_this.buildDatum(datum));
        };
      })(this));
    },
    buildDatum: function(datum) {
      datum.elem = $('<div>').addClass('datum');
      _.each(this.attributes, (function(_this) {
        return function(attribute) {
          return datum.elem.append($('<b>').text(attribute.name)).append(":" + datum[attribute.name] + " ");
        };
      })(this));
      return datum.elem;
    },
    rebuildTree: function() {
      var attributes, target;
      attributes = _.reject(this.attributes, {
        target: true
      });
      target = _.findWhere(this.attributes, {
        target: true
      });
      this.tree = DQ_ID3.generate_tree(this.trainingData, attributes, target);
      window.tree = this.tree;
      window.data = this.testData;
      return this.displayTree();
    },
    displayTree: function() {
      var root;
      root = this.buildTree(this.tree, 'root').removeClass('closed').addClass('root');
      return $('.tree .scrollable').append(root);
    },
    buildTree: function(node, value) {
      var children, row;
      node.elem = $('<div>').addClass('tree-node closed');
      row = $('<div>').addClass('tree-node-row');
      node.elem.append(row);
      if (value) {
        row.append($('<b>').text(value));
      }
      if (node.terminal) {
        node.elem.addClass('terminal');
        row.append(": " + node.label);
      } else {
        row.click(function() {
          return node.elem.toggleClass('closed');
        });
        row.append(": split on " + node.attribute.name);
        children = $('<div>').addClass('tree-node-children');
        node.elem.append(children);
        _.each(_.pairs(node.children), (function(_this) {
          return function(arg) {
            var childNode, value;
            value = arg[0], childNode = arg[1];
            return children.append(_this.buildTree(childNode, value));
          };
        })(this));
      }
      return node.elem;
    }
  };

  DQ_ID3_Visualizer.init();

}).call(this);
